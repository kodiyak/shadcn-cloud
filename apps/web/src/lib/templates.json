[
  {
    "title": "Button",
    "description": "Used to trigger an action or event, such as submitting a form, displaying a dialog or sending a request.",
    "features": [
      "A wrapper around native HTML <button>, supports all HTMLButtonElement properties, methods and events",
      "Different variants, sizes and border radiuses",
      "Pending state animation",
      "Respects reduce motion settings",
      "Supports icons, loading spinner and custom content"
    ],
    "references": [
      {
        "title": "llms.txt",
        "href": "https://llms.ai/docs/components/button"
      },
      {
        "title": "MDN Reference",
        "href": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"
      }
    ],
    "tools": [
      {
        "title": "React",
        "icon": "react",
        "href": "https://react.dev"
      },
      {
        "title": "TypeScript",
        "icon": "typescript",
        "href": "https://www.typescriptlang.org"
      },
      {
        "title": "Radix UI",
        "icon": "radix",
        "href": "https://www.radix-ui.com"
      },
      {
        "title": "Tailwind CSS",
        "icon": "tailwindcss",
        "href": "https://tailwindcss.com"
      },
      {
        "title": "Motion",
        "icon": "motion",
        "href": "https://motion.dev/one"
      },
      {
        "title": "cva",
        "icon": "cva",
        "href": "https://cva-ui.com"
      }
    ],
    "files": {
      "index.mdx": "# Usage\r\n\r\n```tsx\r\nimport Button from \"@workspace/ui/components/button\";\r\n\r\n<Button>Click me</Button>\r\n```\r\n\r\n\r\n# Previews\r\n\r\n## Minimal\r\n<Preview path={'/previews/minimal.tsx'} />\r\n\r\n## Motion\r\n<Preview path={'/previews/motion-button.tsx'} />\r\n\r\n# Props\r\n\r\n<TypeTable\r\n  type={{\r\n    variant: {\r\n      description: 'Button variants',\r\n      type: '\"default\" | \"primary\" | \"secondary\" | \"destructive\" | \"outline\" | \"ghost\" | \"link\"',\r\n      default: 'default',\r\n    },\r\n    size: {\r\n      description: 'Button sizes',\r\n      type: '\"default\" | \"sm\" | \"lg\"',\r\n      default: 'default',\r\n    },\r\n    disabled: {\r\n      description: 'Disable the button',\r\n      type: 'boolean',\r\n      default: 'false',\r\n    },\r\n    className: {\r\n      description: 'Additional CSS classes',\r\n      type: 'string',\r\n    },\r\n  }}\r\n/>",
      "index.tsx": "import { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport type * as React from 'react';\r\nimport { cn } from '/utils.ts';\r\n\r\nconst buttonVariants = cva(\r\n\tcn(\r\n\t\t'inline-flex font-sans items-center cursor-default justify-center gap-2 whitespace-nowrap text-sm font-medium transition-all',\r\n\t\t'disabled:bg-accent disabled:from-accent disabled:to-accent disabled:opacity-40 disabled:text-muted-foreground/50 disabled:cursor-not-allowed',\r\n\t\t'shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\r\n\t\t'[&_svg]:pointer-events-none [&_svg]:shrink-0',\r\n\t),\r\n\t{\r\n\t\tvariants: {\r\n\t\t\tvariant: {\r\n\t\t\t\tdefault: 'bg-foreground text-background hover:bg-foreground/90',\r\n\t\t\t\tprimary: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n\t\t\t\tdestructive:\r\n\t\t\t\t\t'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n\t\t\t\toutline:\r\n\t\t\t\t\t'border bg-background/50 text-muted-foreground hover:bg-muted/35 hover:text-foreground',\r\n\t\t\t\tsecondary:\r\n\t\t\t\t\t'border bg-background/50 bg-gradient-to-b from-accent/10 to-background text-muted-foreground hover:text-foreground',\r\n\t\t\t\tghost: cn(\r\n\t\t\t\t\t'text-muted-foreground hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/30',\r\n\t\t\t\t\t'data-[state=open]:bg-accent data-[state=open]:text-foreground',\r\n\t\t\t\t\t'dark:data-[state=open]:bg-accent/40 dark:data-[state=open]:text-foreground',\r\n\t\t\t\t),\r\n\t\t\t\t'ghost-purple':\r\n\t\t\t\t\t'text-purple-400 border border-purple-500/20 hover:bg-purple-500/10 hover:text-purple-500 hover:border-purple-500/40',\r\n\t\t\t\t'destructive-ghost':\r\n\t\t\t\t\t'text-muted-foreground hover:bg-accent hover:text-destructive dark:hover:bg-accent/30',\r\n\t\t\t\t'success-ghost':\r\n\t\t\t\t\t'text-muted-foreground hover:bg-accent hover:text-success dark:hover:bg-accent/30',\r\n\t\t\t\t'success-outline':\r\n\t\t\t\t\t'border border-success/20 bg-background/50 text-success hover:bg-success/10 hover:text-success-foreground',\r\n\t\t\t\tlink: 'text-muted-foreground underline-offset-4 hover:underline hover:text-foreground',\r\n\t\t\t\tcommand: cn(\r\n\t\t\t\t\t'border-input data-[placeholder]:text-muted-foreground',\r\n\t\t\t\t\t\"[&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 \",\r\n\t\t\t\t\t'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\r\n\t\t\t\t\t'dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 border bg-transparent px-3 py-2 text-sm whitespace-nowrap',\r\n\t\t\t\t\t'transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\r\n\t\t\t\t\t'*:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center',\r\n\t\t\t\t\t\"*:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\tsize: {\r\n\t\t\t\tdefault: `h-12 rounded-xl px-4 py-2 has-[>svg]:px-3 [&_svg:not([class*='size-'])]:size-5`,\r\n\t\t\t\tsm: `h-10 rounded-lg gap-1.5 px-3 has-[>svg]:px-2.5 [&_svg:not([class*='size-'])]:size-5`,\r\n\t\t\t\txs: `h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5 [&_svg:not([class*='size-'])]:size-4`,\r\n\t\t\t\txxs: `h-8 text-xs rounded gap-1 p-0 h-auto [&_svg:not([class*='size-'])]:size-3`,\r\n\t\t\t\tlg: `h-10 rounded-xl px-6 has-[>svg]:px-4 [&_svg:not([class*='size-'])]:size-4`,\r\n\t\t\t\ticon: 'size-9 rounded-lg [&_svg]:size-5',\r\n\t\t\t\t'icon-sm': 'size-8 rounded [&_svg]:size-5',\r\n\t\t\t\t'icon-xs': 'size-5 rounded [&_svg]:size-3.5',\r\n\t\t\t\t'icon-xxs': 'size-4 rounded [&_svg]:size-3',\r\n\t\t\t},\r\n\t\t\trounded: {\r\n\t\t\t\ttrue: 'rounded-full',\r\n\t\t\t\tfalse: '',\r\n\t\t\t},\r\n\t\t},\r\n\t\tdefaultVariants: {\r\n\t\t\tvariant: 'default',\r\n\t\t\tsize: 'default',\r\n\t\t\trounded: false,\r\n\t\t},\r\n\t},\r\n);\r\n\r\nexport type ButtonProps = React.ComponentProps<'button'> &\r\n\tVariantProps<typeof buttonVariants> & {\r\n\t\tasChild?: boolean;\r\n\t};\r\n\r\nfunction Button({\r\n\tclassName,\r\n\tvariant,\r\n\tsize,\r\n\tasChild = false,\r\n\t...props\r\n}: ButtonProps) {\r\n\tconst Comp = asChild ? Slot : 'button';\r\n\r\n\treturn (\r\n\t\t<Comp\r\n\t\t\tclassName={cn(buttonVariants({ variant, size, className }))}\r\n\t\t\tdata-slot=\"button\"\r\n\t\t\ttype={'button'}\r\n\t\t\t{...props}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport { Button, buttonVariants };\r\n",
      "metadata.json": "{\r\n  \"title\": \"Button\",\r\n  \"description\": \"Used to trigger an action or event, such as submitting a form, displaying a dialog or sending a request.\",\r\n  \"features\": [\r\n    \"A wrapper around native HTML <button>, supports all HTMLButtonElement properties, methods and events\",\r\n    \"Different variants, sizes and border radiuses\",\r\n    \"Pending state animation\",\r\n    \"Respects reduce motion settings\",\r\n    \"Supports icons, loading spinner and custom content\"\r\n  ],\r\n  \"references\": [\r\n    {\r\n      \"title\": \"llms.txt\",\r\n      \"href\": \"https://llms.ai/docs/components/button\"\r\n    },\r\n    {\r\n      \"title\": \"MDN Reference\",\r\n      \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"\r\n    }\r\n  ],\r\n  \"tools\": [\r\n    {\r\n      \"title\": \"React\",\r\n      \"icon\": \"react\",\r\n      \"href\": \"https://react.dev\"\r\n    },\r\n    {\r\n      \"title\": \"TypeScript\",\r\n      \"icon\": \"typescript\",\r\n      \"href\": \"https://www.typescriptlang.org\"\r\n    },\r\n    {\r\n      \"title\": \"Radix UI\",\r\n      \"icon\": \"radix\",\r\n      \"href\": \"https://www.radix-ui.com\"\r\n    },\r\n    {\r\n      \"title\": \"Tailwind CSS\",\r\n      \"icon\": \"tailwindcss\",\r\n      \"href\": \"https://tailwindcss.com\"\r\n    },\r\n    {\r\n      \"title\": \"Motion\",\r\n      \"icon\": \"motion\",\r\n      \"href\": \"https://motion.dev/one\"\r\n    },\r\n    {\r\n      \"title\": \"cva\",\r\n      \"icon\": \"cva\",\r\n      \"href\": \"https://cva-ui.com\"\r\n    }\r\n  ]\r\n}",
      "previews\\minimal.tsx": "import { Button } from '/index.tsx';\r\n\r\nexport default function MinimalPreview() {\r\n\treturn (\r\n\t\t<div className=\"flex flex-col\">\r\n\t\t\t<Button>Minimal Button</Button>\r\n\t\t</div>\r\n\t);\r\n}\r\n",
      "previews\\motion-button.tsx": "import * as motion from 'motion/react-client';\r\nimport { useState } from 'react';\r\nimport { Button } from '/index.tsx';\r\n\r\nconst MButton = motion.create(Button);\r\n\r\nexport default function MotionButton() {\r\n\tconst [count, setCount] = useState(0);\r\n\r\n\treturn (\r\n\t\t<MButton\r\n\t\t\tanimate={{ opacity: 1, scale: 1, filter: 'blur(0px)' }}\r\n\t\t\tinitial={{ opacity: 0, scale: 0.9, filter: 'blur(5px)' }}\r\n\t\t\tonClick={() => {\r\n\t\t\t\tsetCount((old) => old + 2);\r\n\t\t\t}}\r\n\t\t\twhileTap={{ scale: 0.9, filter: 'blur(5px)' }}\r\n\t\t>\r\n\t\t\tMy Count Button: {count}\r\n\t\t</MButton>\r\n\t);\r\n}\r\n",
      "utils.ts": "import { type ClassValue, clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n\treturn twMerge(clsx(inputs));\r\n}\r\n"
    }
  },
  {
    "title": "Card",
    "description": "Displays a card with header, content, and footer.",
    "features": [
      "Forms, buttons, links and more..."
    ],
    "references": [
      {
        "title": "llms.txt",
        "href": "https://llms.ai/docs/components/card"
      },
      {
        "title": "MDN Reference",
        "href": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/card"
      }
    ],
    "tools": [
      {
        "title": "React",
        "icon": "react",
        "href": "https://react.dev"
      },
      {
        "title": "TypeScript",
        "icon": "typescript",
        "href": "https://www.typescriptlang.org"
      },
      {
        "title": "Tailwind CSS",
        "icon": "tailwindcss",
        "href": "https://tailwindcss.com"
      }
    ],
    "files": {
      "index.mdx": "import HeroPreview from \"./previews/hero\";\r\n\r\n# Card\r\n\r\nThis is a minimal card component documentation.\r\n\r\n## Usage\r\n\r\n```tsx\r\nimport Card from \"@workspace/ui/components/card\";\r\n```\r\n\r\n```tsx\r\n<Card>\r\n  <h1>Title</h1>\r\n  <p>Description</p>\r\n</Card>\r\n```\r\n",
      "index.tsx": "import type { PropsWithChildren } from \"react\";\r\n\r\nexport default function Card({ children }: PropsWithChildren) {\r\n\treturn <div className=\"card\">{children}</div>;\r\n}\r\n",
      "metadata.json": "{\r\n  \"title\": \"Card\",\r\n  \"description\": \"Displays a card with header, content, and footer.\",\r\n  \"features\": [\r\n    \"Forms, buttons, links and more...\"\r\n  ],\r\n  \"references\": [\r\n    {\r\n      \"title\": \"llms.txt\",\r\n      \"href\": \"https://llms.ai/docs/components/card\"\r\n    },\r\n    {\r\n      \"title\": \"MDN Reference\",\r\n      \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/card\"\r\n    }\r\n  ],\r\n  \"tools\": [\r\n    {\r\n      \"title\": \"React\",\r\n      \"icon\": \"react\",\r\n      \"href\": \"https://react.dev\"\r\n    },\r\n    {\r\n      \"title\": \"TypeScript\",\r\n      \"icon\": \"typescript\",\r\n      \"href\": \"https://www.typescriptlang.org\"\r\n    },\r\n    {\r\n      \"title\": \"Tailwind CSS\",\r\n      \"icon\": \"tailwindcss\",\r\n      \"href\": \"https://tailwindcss.com\"\r\n    }\r\n  ]\r\n}",
      "previews\\hero.tsx": "import Card from '/index.tsx';\r\n\r\nexport default function HeroPreview() {\r\n\treturn (\r\n\t\t<Card>\r\n\t\t\t<h1>Title</h1>\r\n\t\t\t<p>Description</p>\r\n\t\t</Card>\r\n\t);\r\n}\r\n"
    }
  },
  {
    "title": "Minimal Checkbox",
    "description": "Native HTML Checkbox",
    "files": {
      "index.mdx": "import HeroPreview from \"./previews/hero\";\r\n\r\n# Checkbox\r\n\r\nThis is a minimal checkbox component documentation.\r\n\r\n## Usage\r\n\r\n```tsx\r\nimport Checkbox from \"@workspace/ui/components/checkbox\";\r\n```\r\n\r\n```tsx\r\n<Checkbox>Accept terms</Checkbox>\r\n```\r\n",
      "index.tsx": "import type { InputHTMLAttributes } from \"react\";\r\n\r\nexport default function Checkbox(props: InputHTMLAttributes<HTMLInputElement>) {\r\n\treturn <input type=\"checkbox\" {...props} />;\r\n}\r\n",
      "metadata.json": "{\r\n  \"title\": \"Minimal Checkbox\",\r\n  \"description\": \"Native HTML Checkbox\"\r\n}",
      "previews\\hero.tsx": "import Checkbox from \"..\";\r\n\r\nexport default function HeroPreview() {\r\n\treturn (\r\n\t\t<div className=\"flex flex-col\">\r\n\t\t\t<Checkbox>Accept terms</Checkbox>\r\n\t\t</div>\r\n\t);\r\n}\r\n"
    }
  },
  {
    "title": "Minimal Input",
    "description": "Native HTML Input",
    "files": {
      "index.mdx": "import HeroPreview from \"./previews/hero\";\r\n\r\n# Input\r\n\r\nThis is a minimal input component documentation.\r\n\r\n## Usage\r\n\r\n```tsx\r\nimport Input from \"@workspace/ui/components/input\";\r\n```\r\n\r\n```tsx\r\n<Input placeholder=\"Type here\" />\r\n```\r\n",
      "index.tsx": "import type { InputHTMLAttributes } from \"react\";\r\n\r\nexport default function Input(props: InputHTMLAttributes<HTMLInputElement>) {\r\n\treturn <input {...props} />;\r\n}\r\n",
      "metadata.json": "{\r\n  \"title\": \"Minimal Input\",\r\n  \"description\": \"Native HTML Input\"\r\n}",
      "previews\\hero.tsx": "import Input from \"..\";\r\n\r\nexport default function HeroPreview() {\r\n\treturn (\r\n\t\t<div className=\"flex flex-col\">\r\n\t\t\t<Input placeholder=\"Type here\" />\r\n\t\t</div>\r\n\t);\r\n}\r\n"
    }
  },
  {
    "title": "Kibo Mini Calendar",
    "description": "Customizable mini calendar component for React, built with Radix UI and Tailwind CSS.",
    "features": [
      "Customizable date selection",
      "Supports range selection",
      "Keyboard navigation",
      "Accessible with ARIA attributes",
      "Responsive design with Tailwind CSS",
      "Animations with Motion One"
    ],
    "references": [
      {
        "title": "llms.txt",
        "href": "https://llms.ai/docs/components/calendar"
      },
      {
        "title": "MDN Reference",
        "href": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/calendar"
      }
    ],
    "tools": [
      {
        "title": "React",
        "icon": "react",
        "href": "https://react.dev"
      },
      {
        "title": "TypeScript",
        "icon": "typescript",
        "href": "https://www.typescriptlang.org"
      },
      {
        "title": "Radix UI",
        "icon": "radix",
        "href": "https://www.radix-ui.com"
      },
      {
        "title": "Tailwind CSS",
        "icon": "tailwindcss",
        "href": "https://tailwindcss.com"
      },
      {
        "title": "Motion",
        "icon": "motion",
        "href": "https://motion.dev/one"
      },
      {
        "title": "cva",
        "icon": "cva",
        "href": "https://cva-ui.com"
      }
    ],
    "files": {
      "button.tsx": "import { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport type * as React from 'react';\r\n\r\nimport { cn } from '/utils';\r\n\r\nconst buttonVariants = cva(\r\n\t\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n\t{\r\n\t\tvariants: {\r\n\t\t\tvariant: {\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n\t\t\t\tdestructive:\r\n\t\t\t\t\t'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n\t\t\t\toutline:\r\n\t\t\t\t\t'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n\t\t\t\tsecondary:\r\n\t\t\t\t\t'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n\t\t\t\tghost:\r\n\t\t\t\t\t'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\r\n\t\t\t\tlink: 'text-primary underline-offset-4 hover:underline',\r\n\t\t\t},\r\n\t\t\tsize: {\r\n\t\t\t\tdefault: 'h-9 px-4 py-2 has-[>svg]:px-3',\r\n\t\t\t\tsm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n\t\t\t\tlg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\r\n\t\t\t\ticon: 'size-9',\r\n\t\t\t},\r\n\t\t},\r\n\t\tdefaultVariants: {\r\n\t\t\tvariant: 'default',\r\n\t\t\tsize: 'default',\r\n\t\t},\r\n\t},\r\n);\r\n\r\nfunction Button({\r\n\tclassName,\r\n\tvariant,\r\n\tsize,\r\n\tasChild = false,\r\n\t...props\r\n}: React.ComponentProps<'button'> &\r\n\tVariantProps<typeof buttonVariants> & {\r\n\t\tasChild?: boolean;\r\n\t}) {\r\n\tconst Comp = asChild ? Slot : 'button';\r\n\r\n\treturn (\r\n\t\t<Comp\r\n\t\t\tclassName={cn(buttonVariants({ variant, size, className }))}\r\n\t\t\tdata-slot=\"button\"\r\n\t\t\t{...props}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport { Button, buttonVariants };\r\n",
      "index.mdx": "# Usage\r\n\r\n```tsx\r\nimport Button from \"@workspace/ui/components/button\";\r\n\r\n<Button>Click me</Button>\r\n```\r\n\r\n\r\n# Previews\r\n\r\n## Minimal\r\n<Preview path={'/previews/minimal.tsx'} />\r\n\r\n# Props\r\n\r\n<TypeTable\r\n  type={{\r\n    variant: {\r\n      description: 'Button variants',\r\n      type: '\"default\" | \"primary\" | \"secondary\" | \"destructive\" | \"outline\" | \"ghost\" | \"link\"',\r\n      default: 'default',\r\n    },\r\n    size: {\r\n      description: 'Button sizes',\r\n      type: '\"default\" | \"sm\" | \"lg\"',\r\n      default: 'default',\r\n    },\r\n    disabled: {\r\n      description: 'Disable the button',\r\n      type: 'boolean',\r\n      default: 'false',\r\n    },\r\n    className: {\r\n      description: 'Additional CSS classes',\r\n      type: 'string',\r\n    },\r\n  }}\r\n/>",
      "index.tsx": "import { useControllableState } from '@radix-ui/react-use-controllable-state';\r\nimport { addDays, format, isSameDay, isToday } from 'date-fns';\r\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\r\nimport { Slot } from 'radix-ui';\r\nimport {\r\n\ttype ButtonHTMLAttributes,\r\n\ttype ComponentProps,\r\n\tcreateContext,\r\n\ttype HTMLAttributes,\r\n\ttype MouseEventHandler,\r\n\ttype ReactNode,\r\n\tuseContext,\r\n} from 'react';\r\nimport { Button } from '/button';\r\nimport { cn } from '/utils';\r\n\r\n// Context for sharing state between components\r\ntype MiniCalendarContextType = {\r\n\tselectedDate: Date | null | undefined;\r\n\tonDateSelect: (date: Date) => void;\r\n\tstartDate: Date;\r\n\tonNavigate: (direction: 'prev' | 'next') => void;\r\n\tdays: number;\r\n};\r\nconst MiniCalendarContext = createContext<MiniCalendarContextType | null>(null);\r\nconst useMiniCalendar = () => {\r\n\tconst context = useContext(MiniCalendarContext);\r\n\tif (!context) {\r\n\t\tthrow new Error('MiniCalendar components must be used within MiniCalendar');\r\n\t}\r\n\treturn context;\r\n};\r\n// Helper function to get array of consecutive dates\r\nconst getDays = (startDate: Date, count: number): Date[] => {\r\n\tconst days: Date[] = [];\r\n\tfor (let i = 0; i < count; i++) {\r\n\t\tdays.push(addDays(startDate, i));\r\n\t}\r\n\treturn days;\r\n};\r\n// Helper function to format date\r\nconst formatDate = (date: Date) => {\r\n\tconst month = format(date, 'MMM');\r\n\tconst day = format(date, 'd');\r\n\treturn { month, day };\r\n};\r\nexport type MiniCalendarProps = HTMLAttributes<HTMLDivElement> & {\r\n\tvalue?: Date;\r\n\tdefaultValue?: Date;\r\n\tonValueChange?: (date: Date | undefined) => void;\r\n\tstartDate?: Date;\r\n\tdefaultStartDate?: Date;\r\n\tonStartDateChange?: (date: Date | undefined) => void;\r\n\tdays?: number;\r\n};\r\nexport const MiniCalendar = ({\r\n\tvalue,\r\n\tdefaultValue,\r\n\tonValueChange,\r\n\tstartDate,\r\n\tdefaultStartDate = new Date(),\r\n\tonStartDateChange,\r\n\tdays = 5,\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: MiniCalendarProps) => {\r\n\tconst [selectedDate, setSelectedDate] = useControllableState<\r\n\t\tDate | undefined\r\n\t>({\r\n\t\tprop: value,\r\n\t\tdefaultProp: defaultValue,\r\n\t\tonChange: onValueChange,\r\n\t});\r\n\tconst [currentStartDate, setCurrentStartDate] = useControllableState({\r\n\t\tprop: startDate,\r\n\t\tdefaultProp: defaultStartDate,\r\n\t\tonChange: onStartDateChange,\r\n\t});\r\n\tconst handleDateSelect = (date: Date) => {\r\n\t\tsetSelectedDate(date);\r\n\t};\r\n\tconst handleNavigate = (direction: 'prev' | 'next') => {\r\n\t\tconst newStartDate = addDays(\r\n\t\t\tcurrentStartDate || new Date(),\r\n\t\t\tdirection === 'next' ? days : -days,\r\n\t\t);\r\n\t\tsetCurrentStartDate(newStartDate);\r\n\t};\r\n\tconst contextValue: MiniCalendarContextType = {\r\n\t\tselectedDate: selectedDate || null,\r\n\t\tonDateSelect: handleDateSelect,\r\n\t\tstartDate: currentStartDate || new Date(),\r\n\t\tonNavigate: handleNavigate,\r\n\t\tdays,\r\n\t};\r\n\treturn (\r\n\t\t<MiniCalendarContext.Provider value={contextValue}>\r\n\t\t\t<div\r\n\t\t\t\tclassName={cn(\r\n\t\t\t\t\t'flex items-center gap-2 rounded-lg border bg-background p-2',\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t)}\r\n\t\t\t\t{...props}\r\n\t\t\t>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</MiniCalendarContext.Provider>\r\n\t);\r\n};\r\nexport type MiniCalendarNavigationProps =\r\n\tButtonHTMLAttributes<HTMLButtonElement> & {\r\n\t\tdirection: 'prev' | 'next';\r\n\t\tasChild?: boolean;\r\n\t};\r\nexport const MiniCalendarNavigation = ({\r\n\tdirection,\r\n\tasChild = false,\r\n\tchildren,\r\n\tonClick,\r\n\t...props\r\n}: MiniCalendarNavigationProps) => {\r\n\tconst { onNavigate } = useMiniCalendar();\r\n\tconst Icon = direction === 'prev' ? ChevronLeftIcon : ChevronRightIcon;\r\n\tconst handleClick: MouseEventHandler<HTMLButtonElement> = (event) => {\r\n\t\tonNavigate(direction);\r\n\t\tonClick?.(event);\r\n\t};\r\n\tif (asChild) {\r\n\t\treturn (\r\n\t\t\t<Slot.Root onClick={handleClick} {...props}>\r\n\t\t\t\t{children}\r\n\t\t\t</Slot.Root>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tonClick={handleClick}\r\n\t\t\tsize={asChild ? undefined : 'icon'}\r\n\t\t\ttype=\"button\"\r\n\t\t\tvariant={asChild ? undefined : 'ghost'}\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t{children ?? <Icon className=\"size-4\" />}\r\n\t\t</Button>\r\n\t);\r\n};\r\nexport type MiniCalendarDaysProps = Omit<\r\n\tHTMLAttributes<HTMLDivElement>,\r\n\t'children'\r\n> & {\r\n\tchildren: (date: Date) => ReactNode;\r\n};\r\nexport const MiniCalendarDays = ({\r\n\tclassName,\r\n\tchildren,\r\n\t...props\r\n}: MiniCalendarDaysProps) => {\r\n\tconst { startDate, days: dayCount } = useMiniCalendar();\r\n\tconst days = getDays(startDate, dayCount);\r\n\treturn (\r\n\t\t<div className={cn('flex items-center gap-1', className)} {...props}>\r\n\t\t\t{days.map((date) => children(date))}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport type MiniCalendarDayProps = ComponentProps<typeof Button> & {\r\n\tdate: Date;\r\n};\r\nexport const MiniCalendarDay = ({\r\n\tdate,\r\n\tclassName,\r\n\t...props\r\n}: MiniCalendarDayProps) => {\r\n\tconst { selectedDate, onDateSelect } = useMiniCalendar();\r\n\tconst { month, day } = formatDate(date);\r\n\tconst isSelected = selectedDate && isSameDay(date, selectedDate);\r\n\tconst isTodayDate = isToday(date);\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tclassName={cn(\r\n\t\t\t\t'h-auto min-w-[3rem] flex-col gap-0 p-2 text-xs',\r\n\t\t\t\tisTodayDate && !isSelected && 'bg-accent',\r\n\t\t\t\tclassName,\r\n\t\t\t)}\r\n\t\t\tonClick={() => onDateSelect(date)}\r\n\t\t\tsize=\"sm\"\r\n\t\t\ttype=\"button\"\r\n\t\t\tvariant={isSelected ? 'default' : 'ghost'}\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t<span\r\n\t\t\t\tclassName={cn(\r\n\t\t\t\t\t'font-medium text-[10px] text-muted-foreground',\r\n\t\t\t\t\tisSelected && 'text-primary-foreground/70',\r\n\t\t\t\t)}\r\n\t\t\t>\r\n\t\t\t\t{month}\r\n\t\t\t</span>\r\n\t\t\t<span className=\"font-semibold text-sm\">{day}</span>\r\n\t\t</Button>\r\n\t);\r\n};\r\n",
      "metadata.json": "{\r\n  \"title\": \"Kibo Mini Calendar\",\r\n  \"description\": \"Customizable mini calendar component for React, built with Radix UI and Tailwind CSS.\",\r\n  \"features\": [\r\n    \"Customizable date selection\",\r\n    \"Supports range selection\",\r\n    \"Keyboard navigation\",\r\n    \"Accessible with ARIA attributes\",\r\n    \"Responsive design with Tailwind CSS\",\r\n    \"Animations with Motion One\"\r\n  ],\r\n  \"references\": [\r\n    {\r\n      \"title\": \"llms.txt\",\r\n      \"href\": \"https://llms.ai/docs/components/calendar\"\r\n    },\r\n    {\r\n      \"title\": \"MDN Reference\",\r\n      \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/calendar\"\r\n    }\r\n  ],\r\n  \"tools\": [\r\n    {\r\n      \"title\": \"React\",\r\n      \"icon\": \"react\",\r\n      \"href\": \"https://react.dev\"\r\n    },\r\n    {\r\n      \"title\": \"TypeScript\",\r\n      \"icon\": \"typescript\",\r\n      \"href\": \"https://www.typescriptlang.org\"\r\n    },\r\n    {\r\n      \"title\": \"Radix UI\",\r\n      \"icon\": \"radix\",\r\n      \"href\": \"https://www.radix-ui.com\"\r\n    },\r\n    {\r\n      \"title\": \"Tailwind CSS\",\r\n      \"icon\": \"tailwindcss\",\r\n      \"href\": \"https://tailwindcss.com\"\r\n    },\r\n    {\r\n      \"title\": \"Motion\",\r\n      \"icon\": \"motion\",\r\n      \"href\": \"https://motion.dev/one\"\r\n    },\r\n    {\r\n      \"title\": \"cva\",\r\n      \"icon\": \"cva\",\r\n      \"href\": \"https://cva-ui.com\"\r\n    }\r\n  ]\r\n}",
      "previews\\minimal.tsx": "import {\r\n\tMiniCalendar,\r\n\tMiniCalendarDay,\r\n\tMiniCalendarDays,\r\n\tMiniCalendarNavigation,\r\n} from '/index.tsx';\r\n\r\nexport default function CalendarPreview() {\r\n\treturn (\r\n\t\t<MiniCalendar>\r\n\t\t\t<MiniCalendarNavigation direction=\"prev\" />\r\n\t\t\t<MiniCalendarDays>\r\n\t\t\t\t{(date) => <MiniCalendarDay date={date} key={date.toISOString()} />}\r\n\t\t\t</MiniCalendarDays>\r\n\t\t\t<MiniCalendarNavigation direction=\"next\" />\r\n\t\t</MiniCalendar>\r\n\t);\r\n}\r\n",
      "utils.ts": "import { type ClassValue, clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n\treturn twMerge(clsx(inputs));\r\n}\r\n"
    }
  }
]